24c24
< 		# Chabrier (2003) IMF for young clusters plus disk stars: lognorm and power-law tail
---
> 	# Chabrier (2003) IMF for young clusters plus disk stars: lognorm and power-law tail
26,27c26,34
< 			ml = numpy.asarray((x <= 1.0).nonzero())[0]
< 			mh = numpy.asarray((x > 1.0).nonzero())[0]
---
> 			mnorm = 1.0
> 			A1 = 0.158
> 			mc = 0.079
> 			sigma = 0.69
> 			A2 = 4.43e-2
> 			x0 = -1.3
> 	
> 			ml = numpy.asarray((x <= log10(mnorm)).nonzero())[0]
> 			mh = numpy.asarray((x > log10(mnorm)).nonzero())[0]
29,30c36,37
< 			for i in ml: y[i] = 0.158/x[i]/log(10.) * exp(-(log10(x[i]) - log10(0.079))**2/2./0.69**2)
< 			for i in mh: y[i] = 4.4e-2/log(10.) * x[i]**(-2.3)
---
> 			for i in ml: y[i] = A1 * exp(-(x[i] - log10(mc))**2/2./sigma**2)
> 			for i in mh: y[i] = A2 * (10.**x[i])**x0
50c57
< 	def mass_dist(self, pdf, 
---
> 	def mass_dist(self,
53,54d59
< 		ymin = 0, 
< 		ymax = 1, 
57c62
< 
---
> 	
60,64c65,70
< 			x = numpy.random.uniform(mmin, mmax, size=1000)
< 			y = numpy.random.uniform(ymin, ymax, size=1000)
< 			result.extend(x[numpy.where(y < pdf(x, imf_type))])
< 		self.md = numpy.array(result[:Nn])
< 		return self.md
---
> 			x = numpy.random.uniform(log10(mmin), log10(mmax), size=10*Nn)
> 			y = numpy.random.uniform(0, 1, size=10*Nn)
> 			result.extend(x[numpy.where(y < myf.imf(x, imf_type))])
> 	
> 		md = numpy.array(result[:Nn])
> 		return 10**md
109,113d114
< 		# self.frac[4] = lmbda[0]*lmbda[1]*lmbda[2]*lmbda[3] * (exp(-lmbda[0]*age)/(lmbda[1]-lmbda[0])/(lmbda[2]-lmbda[0])/(lmbda[3]-lmbda[0])/(lmbda[4]-lmbda[0]) +
< 		#	exp(-lmbda[1]*age)/(lmbda[0]-lmbda[1])/(lmbda[2]-lmbda[1])/(lmbda[3]-lmbda[1])/(lmbda[4]-lmbda[1]) + 
< 		#	exp(-lmbda[2]*age)/(lmbda[0]-lmbda[2])/(lmbda[1]-lmbda[2])/(lmbda[3]-lmbda[2])/(lmbda[4]-lmbda[2]) + 
< 		#	exp(-lmbda[3]*age)/(lmbda[0]-lmbda[3])/(lmbda[1]-lmbda[3])/(lmbda[2]-lmbda[3])/(lmbda[4]-lmbda[3]) + 
< 		#	exp(-lmbda[4]*age)/(lmbda[0]-lmbda[4])/(lmbda[1]-lmbda[4])/(lmbda[2]-lmbda[4])/(lmbda[3]-lmbda[4]))
233c234
< 		m_temp = myf.mass_dist(myf.imf, mmin = 0.01, mmax = 100., ymin = 0., ymax = 50., Nn = N, imf_type = imf_type)
---
> 		m_temp = myf.mass_dist(mmin = 0.01, mmax = 100., Nn = N, imf_type = imf_type)
278c279
< 		rad_m = rad*(self.m/min(self.m))**(-0.1)
---
> 		rad_m = rad*(self.m/min(self.m))**(-0.15)
